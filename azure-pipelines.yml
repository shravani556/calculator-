trigger:
- master  # Adjust based on your branch name if needed

pool:
  vmImage: 'windows-latest'  # Change to 'windows-latest' if you want to use Windows

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.8'  # Choose the Python version you want to use
  displayName: 'Use Python 3.8'  # You can change this to your preferred version

- script: |
    python -m pip install --upgrade pip  # Upgrade pip
    # If you have a requirements.txt file for dependencies, uncomment the next line
    # pip install -r requirements.txt
    python script.py  # Run your Python script
  displayName: 'Run Python Script'

#!/usr/bin/env bash
set -euo pipefail

# Header
printf "\n%-40s %-35s %-25s %-15s %-15s %-20s\n" \
  "Subscription ID" "Resource Group" "Storage Account" "Blob GB" "File GB" "Total GB"
printf "%s\n" "$(printf '=%.0s' {1..160})"

# Get all subscriptions
SUBS=($(az account list --query '[].id' -o tsv))

for SUB in "${SUBS[@]}"; do
  az account set --subscription "$SUB"
  az storage account list -o json | jq -c '.[]' | while read -r SA; do
    name=$(jq -r '.name' <<<"$SA")
    rg=$(jq -r '.resourceGroup' <<<"$SA")

    blobId="/subscriptions/$SUB/resourceGroups/$rg/providers/Microsoft.Storage/storageAccounts/$name/blobServices/default"
    fileId="/subscriptions/$SUB/resourceGroups/$rg/providers/Microsoft.Storage/storageAccounts/$name/fileServices/default"

    # Get BlobCapacity
    blobBytes=$(az monitor metrics list --resource "$blobId" --metrics "BlobCapacity" --interval PT1H -o json |
      jq -r '.value[0].timeseries[0].data | last | .average // 0')

    # Get FileCapacity
    fileBytes=$(az monitor metrics list --resource "$fileId" --metrics "FileCapacity" --interval PT1H -o json |
      jq -r '.value[0].timeseries[0].data | last | .average // 0')

    # Convert to GB
    blobGB=$(awk "BEGIN {printf \"%.2f\", $blobBytes / (1024*1024*1024)}")
    fileGB=$(awk "BEGIN {printf \"%.2f\", $fileBytes / (1024*1024*1024)}")
    totalGB=$(awk "BEGIN {printf \"%.2f\", $blobGB + $fileGB}")

    # Print formatted row
    printf "%-40s %-35s %-25s %-15s %-15s %-20s\n" \
      "$SUB" "$rg" "$name" "$blobGB" "$fileGB" "$totalGB"
  done
done



#!/usr/bin/env bash
set -euo pipefail

ENV_TAG_KEYS="${ENV_TAG_KEYS:-Environment,Env,environment,env}"
IFS=',' read -r -a ENV_KEYS <<<"$ENV_TAG_KEYS"

env_tag(){ local j="$1" v; for k in "${ENV_KEYS[@]}"; do v="$(jq -r --arg k "$k" '.tags[$k] // empty' <<<"$j")"; [[ -n "$v" && "$v" != "null" ]] && { echo "$v"; return; }; done; echo ""; }

echo "subscriptionId,resourceGroup,vmName,location,envTag,osDiskGB,dataDisksGB,totalDisksGB"

if [[ "${SCAN_ALL_SUBS:-0}" == "1" ]]; then SUBS=($(az account list --query '[].id' -o tsv)); else SUBS=($(az account show --query id -o tsv)); fi

for SUB in "${SUBS[@]}"; do
  az account set --subscription "$SUB" >/dev/null
  az vm list -o json | jq -c '.[]' | while read -r VM; do
    vmName="$(jq -r '.name' <<<"$VM")"
    rg="$(jq -r '.resourceGroup' <<<"$VM")"
    loc="$(jq -r '.location' <<<"$VM")"
    env="$(env_tag "$VM")"

    osId="$(jq -r '.storageProfile.osDisk.managedDisk.id // empty' <<<"$VM")"
    if [[ -n "$osId" ]]; then osGB="$(az disk show --ids "$osId" --query diskSizeGb -o tsv)"; else
      osGB="$(jq -r '.storageProfile.osDisk.diskSizeGb // 0' <<<"$VM")"; [[ "$osGB" == "null" ]] && osGB=0; fi

    dataTotal=0
    for did in $(jq -r '.storageProfile.dataDisks[]?.managedDisk.id' <<<"$VM"); do
      [[ -z "$did" ]] && continue
      sz="$(az disk show --ids "$did" --query diskSizeGb -o tsv)"
      dataTotal=$(( dataTotal + ${sz:-0} ))
    done

    total=$(( osGB + dataTotal ))
    echo "${SUB},${rg},${vmName},${loc},${env},${osGB},${dataTotal},${total}"
  done
done
